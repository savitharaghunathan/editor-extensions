{
  "name": "editor-extensions-vscode",
  "version": "0.0.3",
  "main": "./out/extension.js",
  "publisher": "konveyor",
  "repository": {
    "type": "git",
    "url": "https://github.com/konveyor/editor-extensions"
  },
  "bugs": "https://github.com/konveyor/editor-extensions/issues",
  "categories": [
    "Programming Languages",
    "Machine Learning",
    "Snippets",
    "Linters"
  ],
  "keywords": [
    "Migration",
    "Migrate",
    "modernizing",
    "MTA",
    "Analyze"
  ],
  "engines": {
    "vscode": "^1.93.0",
    "node": ">=22.9.0",
    "npm": "^9.5.0 || ^10.5.0"
  },
  "contributes": {
    "commands": [
      {
        "command": "konveyor.configureGenAiKey",
        "title": "Configure GenAI Key",
        "category": "Konveyor",
        "icon": "$(key)"
      },
      {
        "command": "konveyor.showAnalysisPanel",
        "title": "Open Konveyor Analysis View",
        "category": "Konveyor",
        "icon": "$(book)"
      },
      {
        "command": "konveyor.expandAllIssues",
        "title": "Expand All",
        "category": "Konveyor",
        "icon": "$(expand-all)"
      },
      {
        "command": "konveyor.expandSingleIssue",
        "title": "Expand All",
        "category": "Konveyor",
        "icon": "$(expand-all)"
      },
      {
        "command": "konveyor.openAnalysisDetails",
        "title": "Open Details",
        "category": "Konveyor",
        "icon": "$(book)"
      },
      {
        "command": "konveyor.overrideAnalyzerBinaries",
        "title": "Override Analyzer Binaries",
        "category": "Konveyor",
        "icon": "$(gear)"
      },
      {
        "command": "konveyor.overrideKaiRpcServerBinaries",
        "title": "Override Generative AI Binaries",
        "category": "Konveyor",
        "icon": "$(gear)"
      },
      {
        "command": "konveyor.configureCustomRules",
        "title": "Configure Custom Rules",
        "category": "Konveyor",
        "icon": "$(gear)"
      },
      {
        "command": "konveyor.configureSourcesTargets",
        "title": "Configure Analysis Sources and Targets",
        "category": "Konveyor",
        "icon": "$(gear)"
      },
      {
        "command": "konveyor.configureLabelSelector",
        "title": "Configure Analysis LabelSelector",
        "category": "Konveyor",
        "icon": "$(gear)"
      },
      {
        "command": "konveyor.openKaiConfigToml",
        "category": "Konveyor",
        "title": "Open Kai config.toml"
      },
      {
        "command": "konveyor.startServer",
        "title": "Start Server",
        "category": "Konveyor",
        "icon": "$(play)"
      },
      {
        "command": "konveyor.stopServer",
        "title": "Stop Server",
        "category": "Konveyor",
        "icon": "$(stop)"
      },
      {
        "command": "konveyor.restartServer",
        "title": "Restart Server",
        "category": "Konveyor",
        "icon": "$(restart)"
      },
      {
        "command": "konveyor.runAnalysis",
        "title": "Run Analysis",
        "category": "Konveyor",
        "icon": "$(play)"
      },
      {
        "command": "konveyor.loadStaticResults",
        "title": "Load results from files",
        "category": "Konveyor"
      },
      {
        "command": "konveyor.loadResultsFromDataFolder",
        "title": "Reload results",
        "category": "Konveyor"
      },
      {
        "command": "konveyor.cleanRuleSets",
        "title": "Reset analysis results",
        "category": "Konveyor"
      },
      {
        "command": "konveyor.loadRuleSets",
        "title": "Load analysis results",
        "category": "Konveyor"
      },
      {
        "command": "konveyor.loadSolution",
        "title": "Load solution",
        "category": "Konveyor"
      },
      {
        "command": "konveyor.applyAll",
        "title": "Apply All",
        "category": "Konveyor",
        "icon": "$(check)"
      },
      {
        "command": "konveyor.reloadLastResolutions",
        "title": "Reload Last Resolutions",
        "icon": "$(history)",
        "category": "Konveyor"
      },
      {
        "command": "konveyor.discardAll",
        "title": "Discard All",
        "category": "Konveyor",
        "icon": "$(discard)"
      },
      {
        "command": "konveyor.applyFile",
        "title": "Apply",
        "category": "Konveyor",
        "icon": "$(check)"
      },
      {
        "command": "konveyor.discardFile",
        "title": "Discard",
        "category": "Konveyor",
        "icon": "$(discard)"
      },
      {
        "command": "konveyor.copyDiff",
        "category": "Konveyor",
        "title": "Copy Diff"
      },
      {
        "command": "konveyor.copyPath",
        "category": "Konveyor",
        "title": "Copy Path"
      },
      {
        "command": "konveyor.diffView.next",
        "category": "Konveyor",
        "title": "Go to Next File"
      },
      {
        "command": "konveyor.diffView.prev",
        "category": "Konveyor",
        "title": "Go to Previous File"
      },
      {
        "command": "konveyor.diffView.viewFix",
        "category": "Konveyor",
        "title": "View suggested fix"
      },
      {
        "command": "konveyor.diffView.applyBlockInline",
        "icon": "$(check)",
        "category": "diffEditor",
        "title": "Apply Block"
      },
      {
        "command": "konveyor.diffView.applySelectionInline",
        "icon": "$(check)",
        "category": "diffEditor",
        "title": "Apply Selection"
      },
      {
        "command": "konveyor.diffView.applyBlock",
        "icon": "$(arrow-left)",
        "category": "diffEditor",
        "title": "Apply Block"
      },
      {
        "command": "konveyor.diffView.applySelection",
        "icon": "$(arrow-left)",
        "category": "diffEditor",
        "title": "Apply Selection"
      },
      {
        "command": "konveyor.configureGetSolutionParams",
        "title": "Configure getSolution Parameters",
        "category": "Konveyor",
        "icon": "$(gear)"
      }
    ],
    "submenus": [
      {
        "id": "konveyor.submenu",
        "label": "Konveyor Actions"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "konveyor",
          "title": "Konveyor",
          "icon": "resources/konveyor-icon-color.png"
        }
      ]
    },
    "views": {
      "konveyor": [
        {
          "id": "konveyor.issueView",
          "name": "Konveyor Issues"
        },
        {
          "id": "konveyor.diffView",
          "name": "Konveyor Resolutions"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "konveyor.showAnalysisPanel",
          "group": "navigation@1",
          "when": "view == konveyor.issueView"
        },
        {
          "command": "konveyor.expandAllIssues",
          "group": "navigation@2",
          "when": "view == konveyor.issueView"
        },
        {
          "command": "konveyor.applyAll",
          "group": "navigation@1",
          "when": "view == konveyor.diffView"
        },
        {
          "command": "konveyor.discardAll",
          "group": "navigation@2",
          "when": "view == konveyor.diffView"
        },
        {
          "command": "konveyor.reloadLastResolutions",
          "group": "navigation@3",
          "when": "view == konveyor.diffView"
        }
      ],
      "view/item/context": [
        {
          "command": "konveyor.expandSingleIssue",
          "group": "inline@2",
          "when": "view == konveyor.issueView && viewItem == incident-type-item"
        },
        {
          "command": "konveyor.openAnalysisDetails",
          "group": "inline@1",
          "when": "view == konveyor.issueView && viewItem == incident-type-item"
        },
        {
          "command": "konveyor.applyFile",
          "group": "inline",
          "when": "view == konveyor.diffView && viewItem == file-item"
        },
        {
          "command": "konveyor.discardFile",
          "group": "inline",
          "when": "view == konveyor.diffView && viewItem == file-item"
        },
        {
          "command": "konveyor.applyFile",
          "group": "1@1",
          "when": "view == konveyor.diffView && viewItem == file-item"
        },
        {
          "command": "konveyor.discardFile",
          "group": "1@2",
          "when": "view == konveyor.diffView && viewItem == file-item"
        },
        {
          "command": "konveyor.copyDiff",
          "group": "2@1",
          "when": "view == konveyor.diffView && viewItem == file-item"
        },
        {
          "command": "konveyor.copyPath",
          "group": "2@2",
          "when": "view == konveyor.diffView && viewItem == file-item"
        }
      ],
      "diffEditor/gutter/selection": [
        {
          "command": "konveyor.diffView.applySelectionInline",
          "group": "primary",
          "when": "diffEditorInlineMode && ((diffEditorModifiedUri =~ /^konveyorMemFs\\:.*$/ && diffEditorOriginalWritable) || (diffEditorOriginalUri =~ /^konveyorMemFs\\:.*$/ && diffEditorModifiedWritable))"
        },
        {
          "command": "konveyor.diffView.applySelection",
          "group": "primary",
          "when": "!diffEditorInlineMode && ((diffEditorModifiedUri =~ /^konveyorMemFs\\:.*$/ && diffEditorOriginalWritable) || (diffEditorOriginalUri =~ /^konveyorMemFs\\:.*$/ && diffEditorModifiedWritable))"
        }
      ],
      "diffEditor/gutter/hunk": [
        {
          "command": "konveyor.diffView.applyBlockInline",
          "group": "primary",
          "when": "diffEditorInlineMode && ((diffEditorModifiedUri =~ /^konveyorMemFs\\:.*$/ && diffEditorOriginalWritable) || (diffEditorOriginalUri =~ /^konveyorMemFs\\:.*$/ && diffEditorModifiedWritable))"
        },
        {
          "command": "konveyor.diffView.applyBlock",
          "group": "primary",
          "when": "!diffEditorInlineMode && ((diffEditorModifiedUri =~ /^konveyorMemFs\\:.*$/ && diffEditorOriginalWritable) || (diffEditorOriginalUri =~ /^konveyorMemFs\\:.*$/ && diffEditorModifiedWritable))"
        }
      ],
      "explorer/context": [
        {
          "submenu": "konveyor.submenu",
          "group": "navigation@1"
        }
      ],
      "konveyor.submenu": [],
      "commandPalette": [
        {
          "command": "konveyor.expandSingleIssue",
          "when": "never"
        },
        {
          "command": "konveyor.loadRuleSets",
          "when": "never"
        },
        {
          "command": "konveyor.loadSolution",
          "when": "never"
        },
        {
          "command": "konveyor.applyFile",
          "when": "never"
        },
        {
          "command": "konveyor.discardFile",
          "when": "never"
        },
        {
          "command": "konveyor.copyDiff",
          "when": "never"
        },
        {
          "command": "konveyor.copyPath",
          "when": "never"
        },
        {
          "command": "konveyor.diffView.next",
          "when": "never"
        },
        {
          "command": "konveyor.diffView.prev",
          "when": "never"
        },
        {
          "command": "konveyor.diffView.viewFix",
          "when": "never"
        }
      ]
    },
    "configuration": {
      "type": "object",
      "title": "Konveyor",
      "properties": {
        "konveyor.analyzerPath": {
          "type": "string",
          "default": "",
          "description": "Path to the analyzer binary. If not set, the extension will use the bundled analyzer.",
          "scope": "machine",
          "order": 0
        },
        "konveyor.kaiRpcServerPath": {
          "type": "string",
          "default": "",
          "description": "Path to the rpc-server binary. If not set, the extension will use the bundled binary.",
          "scope": "machine",
          "order": 1
        },
        "konveyor.logLevel": {
          "type": "string",
          "default": "debug",
          "description": "Log level to use with extension",
          "scope": "window",
          "order": 2
        },
        "konveyor.analysis.incidentLimit": {
          "type": "number",
          "default": 10000,
          "description": "Maximum number of incidents to report",
          "scope": "window",
          "order": 1
        },
        "konveyor.analysis.contextLines": {
          "type": "number",
          "default": 10,
          "description": "Number of lines of context to include in incident reports",
          "scope": "window",
          "order": 2
        },
        "konveyor.analysis.codeSnipLimit": {
          "type": "number",
          "default": 10,
          "description": "Number of lines of code to include in incident reports",
          "scope": "window",
          "order": 3
        },
        "konveyor.analysis.useDefaultRulesets": {
          "type": "boolean",
          "default": true,
          "description": "Whether analysis should use the default rulesets, included in the extension",
          "scope": "window",
          "order": 4
        },
        "konveyor.analysis.customRules": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Array of filepaths to additional rules for analysis",
          "scope": "window",
          "order": 5
        },
        "konveyor.analysis.labelSelector": {
          "type": "string",
          "default": "discovery",
          "description": "Expression to select incidents based on custom variables. Example: (!package=io.konveyor.demo.config-utils)",
          "scope": "window",
          "order": 6
        },
        "konveyor.analysis.analyzeKnownLibraries": {
          "type": "boolean",
          "default": false,
          "description": "Whether analysis should include known open-source libraries",
          "scope": "window",
          "order": 7
        },
        "konveyor.analysis.analyzeDependencies": {
          "type": "boolean",
          "default": true,
          "description": "Whether analysis should include dependencies",
          "scope": "window",
          "order": 8
        },
        "konveyor.analysis.analyzeOnSave": {
          "type": "boolean",
          "default": true,
          "description": "Whether analysis of file should be run when saved",
          "scope": "window",
          "order": 9
        },
        "konveyor.diffEditorType": {
          "type": "string",
          "default": "diff",
          "description": "Diff editor to use when resolving proposed solutions",
          "scope": "window"
        },
        "konveyor.kai.backendURL": {
          "type": "string",
          "default": "0.0.0.0:8080",
          "description": "Kai Backend URL",
          "scope": "window"
        },
        "konveyor.kai.providerName": {
          "type": "string",
          "default": "ChatIBMGenAI",
          "description": "URL for the Kai solution server",
          "scope": "window"
        },
        "konveyor.kai.providerArgs": {
          "type": "object",
          "default": {
            "model_id": "meta-llama/llama-3-1-70b-instruct",
            "parameters": {
              "max_new_tokens": 2048
            }
          },
          "description": "Kai provider arguments",
          "scope": "window"
        },
        "konveyor.kai.genAiKey": {
          "type": "string",
          "default": "",
          "description": "Generative AI Key",
          "scope": "window"
        },
        "konveyor.kai.getSolutionMaxPriority": {
          "type": "number",
          "default": 0,
          "description": "Maximum priority for the getSolution request"
        },
        "konveyor.kai.getSolutionMaxDepth": {
          "type": "number",
          "default": 0,
          "description": "Max depth for the getSolution request"
        },
        "konveyor.kai.getSolutionMaxIterations": {
          "type": "number",
          "default": 1,
          "description": "Max iterations for the getSolution request"
        }
      }
    },
    "walkthroughs": [
      {
        "id": "konveyor-setup",
        "title": "Set up Konveyor",
        "description": "Configure Konveyor for your project",
        "steps": [
          {
            "id": "override-analyzer",
            "title": "Override Analyzer Binary",
            "description": "Specify a custom path for the analyzer binary\n[Override Analyzer Binary](command:konveyor.overrideAnalyzerBinaries)\n[Override GenerativeAI Binary](command:konveyor.overrideKaiRpcServerBinaries)",
            "completionEvents": [],
            "media": {
              "markdown": "media/walkthroughs/override-analyzer.md"
            }
          },
          {
            "id": "configure-custom-rules",
            "title": "Configure Custom Rules",
            "description": "Add custom rules for analysis\n[Configure Custom Rules](command:konveyor.configureCustomRules)",
            "completionEvents": [
              "onCommand:konveyor.configureCustomRules"
            ],
            "media": {
              "markdown": "media/walkthroughs/custom-rules.md"
            }
          },
          {
            "id": "configure-analysis-arguments",
            "title": "Configure Analysis Arguments",
            "description": "Set up analysis arguments such as sources, targets, and label selector\n[Configure Analysis Sources and Targets](command:konveyor.configureSourcesTargets)\n[Configure Analysis Label Selector](command:konveyor.configureLabelSelector)",
            "completionEvents": [
              "onCommand:konveyor.configureSourcesTargets",
              "onCommand:konveyor.configureLabelSelector"
            ],
            "media": {
              "markdown": "media/walkthroughs/analysis-arguments.md"
            }
          },
          {
            "id": "configure-gen",
            "title": "Configure Generative AI",
            "description": "Configure Generative AI for your project\n[Configure GenAI Key](command:konveyor.configureGenAiKey)",
            "completionEvents": [
              "onCommand:konveyor.configureGenAiKey"
            ],
            "media": {
              "markdown": "media/walkthroughs/gen-ai.md"
            }
          },
          {
            "id": "configure-get-solution",
            "title": "Configure Get Solution Parameters",
            "description": "Set up getSolution parameters\n[Configure Get Solution Parameters](command:konveyor.configureGetSolutionParams)",
            "completionEvents": [
              "onCommand:konveyor.configureGetSolutionParams"
            ],
            "media": {
              "markdown": "media/walkthroughs/get-solution-params.md"
            }
          },
          {
            "id": "start-server",
            "title": "Start Server",
            "description": "Start the analyzer\n[Start Analyzer](command:konveyor.startServer)",
            "completionEvents": [],
            "media": {
              "markdown": "media/walkthroughs/start-server.md"
            }
          }
        ]
      }
    ],
    "keybindings": [
      {
        "command": "konveyor.diffView.next",
        "key": "f4"
      },
      {
        "command": "konveyor.diffView.prev",
        "key": "shift+f4"
      }
    ]
  },
  "includedAssetPaths": {
    "kai": "../downloaded_assets/kai",
    "fernFlowerPath": "../assets/fernflower/fernflower.jar",
    "jdtls": "../downloaded_assets/jdt.ls-1.38.0",
    "jdtlsBundles": "../assets/jdtls-bundles",
    "openSourceLabelsFile": "../assets/opensource-labels-file/maven.default.index",
    "rulesets": "../assets/rulesets"
  },
  "scripts": {
    "clean": "rimraf out",
    "lint": "eslint .",
    "lint:fix": "eslint --fix .",
    "prebuild": "npm run clean",
    "build": "npm run compile",
    "compile": "tsc -b && webpack --mode production",
    "dev": "npm run watch",
    "watch": "webpack --watch --mode development",
    "test:local": "mocha --require ts-node/register src/**/__tests__/*test.ts",
    "test": "npm run test:local && npm run compile && vscode-test"
  },
  "lint-staged": {
    "*.{js,cjs,mjs,ts,cts,mts}": "eslint --fix",
    "*.{css,json,md,yaml,yml}": "prettier --write"
  },
  "devDependencies": {
    "@types/diff": "^6.0.0",
    "@types/mocha": "^10.0.9",
    "@types/uuid": "^10.0.0",
    "@types/vscode": "^1.93.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "copy-webpack-plugin": "^12.0.2",
    "css-loader": "^7.1.2",
    "expect": "^29.7.0",
    "mocha": "^10.7.3",
    "style-loader": "^4.0.0",
    "ts-loader": "^9.5.1",
    "ts-node": "10.9.2",
    "webpack": "^5.94.0",
    "webpack-cli": "^5.1.4"
  },
  "dependencies": {
    "diff": "^7.0.0"
  }
}
