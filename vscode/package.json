{
  "name": "konveyor",
  "displayName": "Konveyor Extension for VSCode",
  "description": "Open-source migration and modernization tool",
  "author": "Konveyor",
  "icon": "resources/icon.png",
  "license": "Apache-2.0",
  "version": "0.2.0-pre.2-1",
  "main": "./out/extension.js",
  "publisher": "konveyor",
  "repository": {
    "type": "git",
    "url": "https://github.com/konveyor/editor-extensions"
  },
  "bugs": "https://github.com/konveyor/editor-extensions/issues",
  "preview": false,
  "categories": [
    "Programming Languages",
    "Machine Learning",
    "Snippets",
    "Linters"
  ],
  "keywords": [
    "Migration",
    "Migrate",
    "modernizing",
    "MTA",
    "Analyze"
  ],
  "engines": {
    "vscode": "^1.93.0",
    "node": ">=22.9.0",
    "npm": "^9.5.0 || >=10.5.2"
  },
  "enabledApiProposals": [
    "contribDiffEditorGutterToolBarMenus"
  ],
  "extensionDependencies": [
    "redhat.java"
  ],
  "activationEvents": [
    "onFileSystem:konveyorMemFs",
    "onFileSystem:konveyorReadOnly"
  ],
  "contributes": {
    "javaExtensions": [
      "../downloaded_assets/jdtls-bundles/bundle.jar"
    ],
    "commands": [
      {
        "command": "konveyor.openProfilesPanel",
        "title": "Manage Analysis Profile",
        "category": "Konveyor",
        "icon": "$(settings-gear)"
      },
      {
        "command": "konveyor.modelProviderSettingsOpen",
        "title": "Open the GenAI model provider configuration file",
        "category": "Konveyor",
        "icon": "$(gear)"
      },
      {
        "command": "konveyor.modelProviderSettingsBackupReset",
        "title": "Open the default the GenAI model provider configuration file and backup the current file",
        "category": "Konveyor",
        "icon": "$(gear)"
      },
      {
        "command": "konveyor.showAnalysisPanel",
        "title": "Open Analysis View",
        "category": "Konveyor",
        "icon": "$(book)"
      },
      {
        "command": "konveyor.showResolutionPanel",
        "title": "Open Resolution View",
        "category": "Konveyor",
        "icon": "$(beaker)"
      },
      {
        "command": "konveyor.expandAllIssues",
        "title": "Expand All",
        "category": "Konveyor",
        "icon": "$(expand-all)"
      },
      {
        "command": "konveyor.expandSingleIssue",
        "title": "Expand All",
        "category": "Konveyor",
        "icon": "$(expand-all)"
      },
      {
        "command": "konveyor.fixGroupOfIncidents",
        "title": "Resolve incidents",
        "category": "Konveyor",
        "icon": "$(debug-console)"
      },
      {
        "command": "konveyor.fixIncident",
        "title": "Resolve incident",
        "category": "Konveyor",
        "icon": "$(debug-console)"
      },
      {
        "command": "konveyor.openAnalysisDetails",
        "title": "Open Details",
        "category": "Konveyor",
        "icon": "$(book)"
      },
      {
        "command": "konveyor.overrideAnalyzerBinaries",
        "title": "Override Analyzer Binary",
        "category": "Konveyor",
        "icon": "$(gear)"
      },
      {
        "command": "konveyor.configureCustomRules",
        "title": "Configure Custom Rules",
        "category": "Konveyor",
        "icon": "$(gear)"
      },
      {
        "command": "konveyor.configureSourcesTargets",
        "title": "Configure Analysis Sources and Targets",
        "category": "Konveyor",
        "icon": "$(gear)"
      },
      {
        "command": "konveyor.configureLabelSelector",
        "title": "Configure Analysis LabelSelector",
        "category": "Konveyor",
        "icon": "$(gear)"
      },
      {
        "command": "konveyor.startServer",
        "title": "Start Server",
        "category": "Konveyor",
        "icon": "$(play)"
      },
      {
        "command": "konveyor.stopServer",
        "title": "Stop Server",
        "category": "Konveyor",
        "icon": "$(stop)"
      },
      {
        "command": "konveyor.restartServer",
        "title": "Restart Server",
        "category": "Konveyor",
        "icon": "$(restart)"
      },
      {
        "command": "konveyor.restartSolutionServer",
        "title": "Restart Solution Server",
        "category": "Konveyor",
        "icon": "$(restart)"
      },
      {
        "command": "konveyor.runAnalysis",
        "title": "Run Analysis",
        "category": "Konveyor",
        "icon": "$(play)"
      },
      {
        "command": "konveyor.loadStaticResults",
        "title": "Load results from files",
        "category": "Konveyor"
      },
      {
        "command": "konveyor.loadResultsFromDataFolder",
        "title": "Reload results",
        "category": "Konveyor"
      },
      {
        "command": "konveyor.cleanRuleSets",
        "title": "Reset analysis results",
        "category": "Konveyor"
      },
      {
        "command": "konveyor.loadRuleSets",
        "title": "Load analysis results",
        "category": "Konveyor"
      },
      {
        "command": "konveyor.applyAll",
        "title": "Apply All",
        "category": "Konveyor",
        "icon": "$(check)"
      },
      {
        "command": "konveyor.discardAll",
        "title": "Discard All",
        "category": "Konveyor",
        "icon": "$(discard)"
      },
      {
        "command": "konveyor.applyFile",
        "title": "Apply",
        "category": "Konveyor",
        "icon": "$(check)"
      },
      {
        "command": "konveyor.discardFile",
        "title": "Discard",
        "category": "Konveyor",
        "icon": "$(discard)"
      },
      {
        "command": "konveyor.copyDiff",
        "category": "Konveyor",
        "title": "Copy Diff"
      },
      {
        "command": "konveyor.copyPath",
        "category": "Konveyor",
        "title": "Copy Path"
      },
      {
        "command": "konveyor.diffView.next",
        "category": "Konveyor",
        "title": "Go to Next File"
      },
      {
        "command": "konveyor.diffView.prev",
        "category": "Konveyor",
        "title": "Go to Previous File"
      },
      {
        "command": "konveyor.diffView.viewFix",
        "category": "Konveyor",
        "title": "View suggested fix"
      },
      {
        "command": "konveyor.diffView.applyBlockInline",
        "icon": "$(check)",
        "category": "diffEditor",
        "title": "Apply Block"
      },
      {
        "command": "konveyor.diffView.applySelectionInline",
        "icon": "$(check)",
        "category": "diffEditor",
        "title": "Apply Selection"
      },
      {
        "command": "konveyor.diffView.applyBlock",
        "icon": "$(arrow-left)",
        "category": "diffEditor",
        "title": "Apply Block"
      },
      {
        "command": "konveyor.diffView.applySelection",
        "icon": "$(arrow-left)",
        "category": "diffEditor",
        "title": "Apply Selection"
      },
      {
        "command": "konveyor.generateDebugArchive",
        "title": "Generate Debug Archive",
        "category": "Konveyor",
        "icon": "$(bug)"
      },
      {
        "command": "konveyor.configureSolutionServerCredentials",
        "title": "Configure Solution Server Credentials",
        "category": "Konveyor",
        "icon": "$(key)"
      },
      {
        "command": "konveyor.showDiffActions",
        "title": "Show Diff Actions",
        "category": "Konveyor",
        "icon": "$(diff)"
      }
    ],
    "submenus": [
      {
        "id": "konveyor.submenu",
        "label": "Konveyor Actions"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "konveyor",
          "title": "Konveyor",
          "icon": "resources/icon.png"
        }
      ]
    },
    "views": {
      "konveyor": [
        {
          "id": "konveyor.issueView",
          "name": "Konveyor Issues"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "konveyor.showAnalysisPanel",
          "group": "navigation@1",
          "when": "view == konveyor.issueView"
        },
        {
          "command": "konveyor.showResolutionPanel",
          "group": "navigation@2",
          "when": "view == konveyor.issueView"
        },
        {
          "command": "konveyor.expandAllIssues",
          "group": "navigation@3",
          "when": "view == konveyor.issueView"
        }
      ],
      "view/item/context": [
        {
          "command": "konveyor.fixGroupOfIncidents",
          "group": "inline@3",
          "when": "view == konveyor.issueView && viewItem == incident-type-item"
        },
        {
          "command": "konveyor.fixIncident",
          "group": "inline@1",
          "when": "view == konveyor.issueView && viewItem == reference-item"
        },
        {
          "command": "konveyor.expandSingleIssue",
          "group": "inline@2",
          "when": "view == konveyor.issueView && viewItem == incident-type-item"
        },
        {
          "command": "konveyor.openAnalysisDetails",
          "group": "inline@1",
          "when": "view == konveyor.issueView && viewItem == incident-type-item"
        }
      ],
      "explorer/context": [
        {
          "submenu": "konveyor.submenu",
          "group": "navigation@1"
        }
      ],
      "konveyor.submenu": [],
      "commandPalette": [
        {
          "command": "konveyor.expandSingleIssue",
          "when": "never"
        },
        {
          "command": "konveyor.loadRuleSets",
          "when": "never"
        },
        {
          "command": "konveyor.applyFile",
          "when": "never"
        },
        {
          "command": "konveyor.discardFile",
          "when": "never"
        },
        {
          "command": "konveyor.copyDiff",
          "when": "never"
        },
        {
          "command": "konveyor.copyPath",
          "when": "never"
        },
        {
          "command": "konveyor.diffView.next",
          "when": "never"
        },
        {
          "command": "konveyor.diffView.prev",
          "when": "never"
        },
        {
          "command": "konveyor.diffView.viewFix",
          "when": "never"
        }
      ]
    },
    "configuration": {
      "type": "object",
      "title": "Konveyor",
      "properties": {
        "konveyor.logLevel": {
          "type": "string",
          "enum": [
            "error",
            "warn",
            "info",
            "http",
            "verbose",
            "debug",
            "silly"
          ],
          "default": "debug",
          "description": "Logging level used for the extension",
          "scope": "window",
          "order": 1
        },
        "konveyor.analyzerPath": {
          "type": "string",
          "default": "",
          "description": "Path to the analyzer binary. If not set, the extension will use the bundled binary.",
          "scope": "resource",
          "order": 2
        },
        "konveyor.diff.autoAcceptOnSave": {
          "type": "boolean",
          "default": true,
          "description": "Automatically apply diff changes when saving files.",
          "scope": "window",
          "order": 3
        },
        "konveyor.analysis.analyzeOnSave": {
          "type": "boolean",
          "default": true,
          "description": "Should analysis of file be run when it is saved? (Automatically enabled when Agent Mode is active)",
          "scope": "window",
          "order": 10
        },
        "konveyor.analysis.incidentLimit": {
          "type": "integer",
          "default": 10000,
          "description": "Maximum number of incidents to report",
          "scope": "window",
          "order": 11,
          "minimum": 1
        },
        "konveyor.analysis.contextLines": {
          "type": "integer",
          "default": 10,
          "description": "Number of lines of context to include in incident reports.",
          "scope": "window",
          "order": 12,
          "minimum": 1
        },
        "konveyor.analysis.codeSnipLimit": {
          "type": "integer",
          "default": 10,
          "description": "Number of lines of code to include in incident reports.",
          "scope": "window",
          "order": 13,
          "minimum": 1
        },
        "konveyor.analysis.analyzeKnownLibraries": {
          "type": "boolean",
          "default": false,
          "description": "Should the analyzer analyze known open-source libraries?",
          "scope": "window",
          "order": 14
        },
        "konveyor.analysis.analyzeDependencies": {
          "type": "boolean",
          "default": true,
          "description": "Should the analyzer analyze project dependencies?",
          "scope": "window",
          "order": 15
        },
        "konveyor.genai.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable GenAI functionality for solution generation.",
          "scope": "window",
          "order": 20
        },
        "konveyor.kai.agentMode": {
          "type": "boolean",
          "default": false,
          "description": "(Experimental) Use agentic flow when getting solution. Requires automatic analysis.",
          "scope": "window",
          "order": 21
        },
        "konveyor.kai.excludedDiagnosticSources": {
          "type": "array",
          "default": [
            "trunk"
          ],
          "description": "List of diagnostic sources to exclude from agentic workflow.",
          "scope": "window",
          "order": 22
        },
        "konveyor.kai.cacheDir": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "Path to a directory containing cached responses",
          "scope": "window",
          "order": 23
        },
        "konveyor.kai.traceDir": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "Path to a directory containing traces of LLM interactions",
          "scope": "window",
          "order": 24
        },
        "konveyor.kai.traceEnabled": {
          "type": "boolean",
          "default": false,
          "description": "Whether to create traces of the communication with the model",
          "scope": "window",
          "order": 25
        },
        "konveyor.solutionServer.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable the MCP solution server client.",
          "scope": "window",
          "order": 30
        },
        "konveyor.solutionServer.url": {
          "type": "string",
          "default": "http://localhost:8000",
          "pattern": "^https?://.*",
          "patternErrorMessage": "The URL must start with http:// or https://",
          "description": "URL for the MCP solution server endpoint.",
          "scope": "window",
          "order": 31
        },
        "konveyor.solutionServer.auth.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable authentication for the solution server.",
          "scope": "window",
          "order": 32
        },
        "konveyor.solutionServer.auth.realm": {
          "type": "string",
          "default": "tackle",
          "description": "Keycloak realm for authentication.",
          "scope": "window",
          "order": 33
        },
        "konveyor.solutionServer.auth.insecure": {
          "type": "boolean",
          "default": false,
          "description": "Skip SSL certificate verification for the solution server.",
          "scope": "window",
          "order": 34
        },
        "konveyor.debug.webview": {
          "type": "boolean",
          "default": false,
          "description": "Enable debug logging for webview message handling",
          "scope": "window",
          "order": 40
        },
        "konveyor.kai.demoMode": {
          "type": "boolean",
          "default": false,
          "description": "Whether to run Kai in demo mode i.e. use cached LLM responses",
          "scope": "window",
          "order": 41
        }
      }
    },
    "keybindings": []
  },
  "includedAssetPaths": {
    "kai": "../downloaded_assets/kai",
    "fernFlowerPath": "../assets/fernflower/fernflower.jar",
    "jdtls": "../downloaded_assets/jdt.ls-1.38.0",
    "jdtlsBundles": "../downloaded_assets/jdtls-bundles",
    "openSourceLabelsFile": "../downloaded_assets/opensource-labels-file/maven.default.index",
    "rulesets": "../downloaded_assets/rulesets"
  },
  "scripts": {
    "clean": "rimraf out",
    "lint": "eslint .",
    "lint:fix": "eslint --fix .",
    "prebuild": "npm run clean",
    "build": "webpack --mode production",
    "dev": "webpack --watch --mode development",
    "pretest": "npm run build",
    "test": "npm run test:unit-tests && npm run test:integration",
    "test:unit-tests": "mocha",
    "test:integration": "vscode-test"
  },
  "lint-staged": {
    "*.{js,cjs,mjs,ts,cts,mts}": "eslint --fix",
    "*.{css,json,md,yaml,yml}": "prettier --write"
  },
  "devDependencies": {
    "@types/adm-zip": "^0.5.7",
    "@types/diff": "^6.0.0",
    "@types/express": "^5.0.3",
    "@types/jsesc": "^3.0.3",
    "@types/uuid": "^10.0.0",
    "@types/vscode": "^1.93.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "copy-webpack-plugin": "^12.0.2",
    "css-loader": "^7.1.2",
    "express": "^5.1.0",
    "style-loader": "^4.0.0",
    "ts-loader": "^9.5.1",
    "webpack": "^5.94.0",
    "webpack-cli": "^5.1.4"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.12.0",
    "@types/mustache": "^4.2.5",
    "adm-zip": "^0.5.16",
    "diff": "^7.0.0",
    "jsesc": "^3.1.0",
    "mustache": "^4.2.0",
    "undici": "^7.14.0",
    "winston": "^3.17.0",
    "winston-transport-vscode": "^0.1.0"
  }
}
